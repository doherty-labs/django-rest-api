"""
Django settings for django_project project.

Generated by 'django-admin startproject' using Django 3.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
import sys
from pathlib import Path

import structlog
from opentelemetry import trace

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-p9s3h@$1k6gs4uj!qyp$^9f6nttydour71(cq5=83ti(j1r*s4"
TESTING = "test" in sys.argv
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ["localhost"]
CORS_ALLOW_ALL_ORIGINS = True
CSRF_TRUSTED_ORIGINS = ["http://localhost:3000"]


# Application definition

INSTALLED_APPS = [
    "daphne",
    "channels",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_celery_beat",
    "rest_framework",
    "corsheaders",
    "rest_api",
    "djmoney",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.auth.middleware.RemoteUserMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "django.contrib.auth.backends.RemoteUserBackend",
]

ROOT_URLCONF = "django_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "django_project.wsgi.application"
ASGI_APPLICATION = "django_project.asgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("DATABASE_NAME", "maindb"),
        "USER": os.environ.get("DATABASE_USER", "admin_user"),
        "PASSWORD": os.environ.get("DATABASE_PASSWORD", "password123*"),
        "HOST": os.environ.get("DATABASE_HOST", "postgres"),
        "PORT": os.environ.get("DATABASE_PORT", "5432"),
        "OPTIONS": {"sslmode": "require"} if not DEBUG else {},
    }
}

ELASTIC_SEARCH = {
    "host": os.environ.get("ELASTIC_SEARCH_HOST", "elastic"),
    "port": 9200,
    "user": os.environ.get("ELASTIC_SEARCH_USER", ""),
    "password": os.environ.get("ELASTIC_SEARCH_PASSWORD", ""),
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CELERY_BROKER_URL = os.environ.get(
    "CELERY_BROKER_URL", "amqp://guest:guest@rabbitmq:5672/"
)
CELERY_RESULT_BACKEND = os.environ.get(
    "CELERY_RESULT_URL",
    "redis://localhost:6379/0",
)
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_TIMEZONE = "UTC"
CELERY_TASK_TRACK_STARTED = True
CELERYD_HIJACK_ROOT_LOGGER = False

OBJECT_EXPIRATION = 60 * 60 * 24 * 7

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [(os.environ.get("CHANNELS_URLS", "redis://localhost:6379/0"))],
        },
    },
}

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": os.environ.get("CHANNELS_URLS", "redis://localhost:6379/0"),
    }
}

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_jwt.authentication.JSONWebTokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 50,
}

GMAPS_API_KEY = os.environ.get("GMAPS_API_KEY", "")

BUCKET_NAME = os.environ.get("BUCKET_NAME", "")
BUCKET_KEY = os.environ.get("BUCKET_KEY", "")
BUCKET_SECRET = os.environ.get("BUCKET_SECRET", "")
BUCKET_ENDPOINT = "https://" + os.environ.get("BUCKET_ENDPOINT", "")
BUCKET_REGION = os.environ.get("BUCKET_REGION", "uk")


CDN_BUCKET_NAME = os.environ.get("CDN_BUCKET_NAME", "")
CDN_BUCKET_KEY = os.environ.get("CDN_BUCKET_KEY", "")
CDN_BUCKET_SECRET = os.environ.get("CDN_BUCKET_SECRET", "")
CDN_BUCKET_ENDPOINT = "https://" + os.environ.get("CDN_BUCKET_ENDPOINT", "")
CDN_BUCKET_REGION = os.environ.get("CDN_BUCKET_REGION", "uk")


LOGIN_URL = "/admin/login/"
AUTH0_DOMAIN = os.environ.get("AUTH_DOMAIN", "")
AUTH0_IDENTIFIER = os.environ.get("AUTH_IDENTIFIER", "")

AUTH0_DATABASE_CONNECTION_ID = os.environ.get("AUTH0_DATABASE_CONNECTION_ID", "")
AUTH0_GOOGLE_CONNECTION_ID = os.environ.get("AUTH0_GOOGLE_CONNECTION_ID", "")
AUTH0_REST_API_CLIENT_ID = os.environ.get("AUTH_REST_API_CLIENT_ID", "")
AUTH0_REST_API_CLIENT_SECRET = os.environ.get("AUTH_REST_API_CLIENT_SECRET", "")

SENDGRID_API_KEY = os.environ.get("SENDGRID_API_KEY", "")
TWILIO_ACCOUNT_SID = os.environ.get("TWILIO_ACCOUNT_SID", "")
TWILIO_AUTH_TOKEN = os.environ.get("TWILIO_AUTH_TOKEN", "")

STRIPE_API_KEY = os.environ.get("STRIPE_API_KEY", "")
STRIPE_WEBHOOK_SECRET = os.environ.get("STRIPE_WEBHOOK_SECRET", "")
MIXPANEL_TOKEN = os.environ.get("MIXPANEL_TOKEN", "")

IS_PRODUCTION = os.environ.get("DD_ENV") == "prod"
IS_QA = os.environ.get("DD_ENV") == "qa"


JWT_AUTH = {
    "JWT_PAYLOAD_GET_USERNAME_HANDLER": "django_project.auth_utils.jwt_get_username_from_payload_handler",
    "JWT_DECODE_HANDLER": "django_project.auth_utils.jwt_decode_token",
    "JWT_ALGORITHM": "RS256",
    "JWT_AUDIENCE": AUTH0_IDENTIFIER,
    "JWT_ISSUER": AUTH0_DOMAIN,
    "JWT_AUTH_HEADER_PREFIX": "Bearer",
}


def add_open_telemetry_spans(_, __, event_dict):
    span = trace.get_current_span()
    if not span.is_recording():
        event_dict["span"] = None
        return event_dict

    ctx = span.get_span_context()
    parent = getattr(span, "parent", None)

    event_dict["span"] = {
        "span_id": hex(ctx.span_id),
        "trace_id": hex(ctx.trace_id),
        "parent_span_id": None if not parent else hex(parent.span_id),
    }

    return event_dict


if IS_PRODUCTION or IS_QA:
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "json_formatter": {
                "()": structlog.stdlib.ProcessorFormatter,
                "processor": structlog.processors.JSONRenderer(),
                "foreign_pre_chain": [
                    structlog.contextvars.merge_contextvars,
                    structlog.processors.TimeStamper(fmt="iso"),
                    structlog.stdlib.add_logger_name,
                    structlog.stdlib.add_log_level,
                    add_open_telemetry_spans,
                    structlog.stdlib.PositionalArgumentsFormatter(),
                    structlog.processors.StackInfoRenderer(),
                    structlog.processors.format_exc_info,
                    structlog.stdlib.ExtraAdder(),
                    structlog.processors.UnicodeDecoder(),
                ],
            },
            "plain_console": {
                "()": structlog.stdlib.ProcessorFormatter,
                "processor": structlog.dev.ConsoleRenderer(),
            },
            "key_value": {
                "()": structlog.stdlib.ProcessorFormatter,
                "processor": structlog.processors.KeyValueRenderer(
                    key_order=["timestamp", "level", "event", "logger"]
                ),
            },
        },
        "handlers": {
            "console": {
                "class": "logging.StreamHandler",
                "formatter": "plain_console",
            },
            "json_file": {
                "class": "logging.handlers.RotatingFileHandler",
                "filename": "/logs/json.log",
                "formatter": "json_formatter",
                "maxBytes": 1024 * 1024 * 5,  # 5 MB
                "backupCount": 5,
                "level": "WARNING",
            },
            "flat_line_file": {
                "class": "logging.handlers.RotatingFileHandler",
                "filename": "/logs/flat_line.log",
                "formatter": "key_value",
                "maxBytes": 1024 * 1024 * 5,  # 5 MB
                "backupCount": 5,
                "level": "WARNING",
            },
        },
        "loggers": {
            "root": {
                "handlers": ["console", "flat_line_file", "json_file"],
                "level": "INFO",
                "propagate": True,
            }
        },
    }
    structlog.configure(
        processors=[
            structlog.contextvars.merge_contextvars,
            structlog.stdlib.filter_by_level,
            structlog.processors.TimeStamper(fmt="iso"),
            structlog.stdlib.add_logger_name,
            structlog.stdlib.add_log_level,
            add_open_telemetry_spans,
            structlog.stdlib.PositionalArgumentsFormatter(),
            structlog.processors.StackInfoRenderer(),
            structlog.processors.format_exc_info,
            structlog.stdlib.ExtraAdder(),
            structlog.processors.UnicodeDecoder(),
            structlog.stdlib.ProcessorFormatter.wrap_for_formatter,
        ],
        logger_factory=structlog.stdlib.LoggerFactory(),
        cache_logger_on_first_use=True,
    )
