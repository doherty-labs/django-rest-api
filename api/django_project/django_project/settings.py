"""
Django settings for django_project project.

Generated by 'django-admin startproject' using Django 3.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os

from rest_api.services.onepassword import OnePasswordService  # noqa: E402

if os.environ.get("ENABLE_GEVENT_PATCH", "False").lower().strip() == "true":
    from gevent import monkey  # noqa: E402

    monkey.patch_all()  # noqa: E402

    from grpc.experimental.gevent import init_gevent  # noqa: E402

    init_gevent()  # noqa: E402

import sys
from pathlib import Path

from opentelemetry import trace
from opentelemetry.instrumentation.celery import CeleryInstrumentor
from opentelemetry.instrumentation.django import DjangoInstrumentor
from opentelemetry.instrumentation.elasticsearch import ElasticsearchInstrumentor
from opentelemetry.instrumentation.psycopg2 import Psycopg2Instrumentor
from opentelemetry.instrumentation.redis import RedisInstrumentor
from opentelemetry.instrumentation.requests import RequestsInstrumentor

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


OP_SERVICE_ACCOUNT_TOKEN = os.environ.get("OP_SERVICE_ACCOUNT_TOKEN", "")
LOCAL_ONEPASSWORD_REFERENCE = f"op://vault/project/"
DEV_ONEPASSWORD_REFERENCE = f"op://vault/project/"
PROD_ONEPASSWORD_REFERENCE = f"op://vault/project/"


onepassword_service = OnePasswordService(token=OP_SERVICE_ACCOUNT_TOKEN)
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-p9s3h@$1k6gs4uj!qyp$^9f6nttydour71(cq5=83ti(j1r*s4"
TESTING = "test" in sys.argv
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]
CORS_ALLOW_ALL_ORIGINS = True
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://localhost:3002",
    "http://localhost:3003",
]

ASYNC_MODE = os.environ.get("ASYNC_MODE", "False").lower().strip() == "true"

# Application definition

INSTALLED_APPS = [
    "channels",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_celery_beat",
    "rest_framework",
    "corsheaders",
    "rest_api",
    "djmoney",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.auth.middleware.RemoteUserMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "django.contrib.auth.backends.RemoteUserBackend",
]

ROOT_URLCONF = "django_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "django_project.wsgi.application"
ASGI_APPLICATION = "django_project.asgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("DATABASE_NAME", "maindb"),
        "USER": os.environ.get("DATABASE_USER", "admin_user"),
        "PASSWORD": os.environ.get("DATABASE_PASSWORD", "password123*"),
        "HOST": os.environ.get("DATABASE_HOST", "postgres"),
        "PORT": os.environ.get("DATABASE_PORT", "5432"),
        "OPTIONS": {"sslmode": "require"} if not DEBUG else {},
    }
}

ELASTIC_SEARCH = {
    "host": os.environ.get("ELASTIC_SEARCH_HOST", "elastic"),
    "port": 9200,
    "user": os.environ.get("ELASTIC_SEARCH_USER", ""),
    "password": os.environ.get("ELASTIC_SEARCH_PASSWORD", ""),
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CELERY_BROKER_URL = os.environ.get(
    "CELERY_BROKER_URL", "amqp://guest:guest@rabbitmq:5672"
)
CELERY_RESULT_BACKEND = os.environ.get(
    "CELERY_RESULT_URL",
    "redis://redis:6379/0",
)
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_TIMEZONE = "UTC"
CELERY_TASK_TRACK_STARTED = True
CELERYD_HIJACK_ROOT_LOGGER = False

OBJECT_EXPIRATION = 60 * 60 * 24 * 7

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [(os.environ.get("CHANNELS_URLS", "redis://redis:6379/0"))],
        },
    },
}

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": os.environ.get("CHANNELS_URLS", "redis://redis:6379/0"),
    }
}

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_jwt.authentication.JSONWebTokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 50,
}

BUCKET_NAME = onepassword_service.get_item(
    DEV_ONEPASSWORD_REFERENCE + "digitalocean/bucket_name"
)
BUCKET_KEY = onepassword_service.get_item(
    DEV_ONEPASSWORD_REFERENCE + "digitalocean/bucket_access_key"
)
BUCKET_SECRET = onepassword_service.get_item(
    DEV_ONEPASSWORD_REFERENCE + "digitalocean/bucket_secret_key"
)

do_bucket_endpoint = onepassword_service.get_item(
    DEV_ONEPASSWORD_REFERENCE + "digitalocean/bucket_endpoint"
)
BUCKET_ENDPOINT = "https://" + do_bucket_endpoint if do_bucket_endpoint else None
BUCKET_REGION = onepassword_service.get_item(
    DEV_ONEPASSWORD_REFERENCE + "digitalocean/bucket_region"
)


CDN_BUCKET_NAME = onepassword_service.get_item(
    DEV_ONEPASSWORD_REFERENCE + "digitalocean/cdn_bucket_name"
)
CDN_BUCKET_KEY = onepassword_service.get_item(
    DEV_ONEPASSWORD_REFERENCE + "digitalocean/cdn_bucket_access_key"
)
CDN_BUCKET_SECRET = onepassword_service.get_item(
    DEV_ONEPASSWORD_REFERENCE + "digitalocean/cdn_bucket_secret_key"
)
do_cdn_bucket_endpoint = onepassword_service.get_item(
    DEV_ONEPASSWORD_REFERENCE + "digitalocean/cdn_bucket_endpoint"
)
CDN_BUCKET_ENDPOINT = (
    "https://" + do_cdn_bucket_endpoint if do_cdn_bucket_endpoint else None
)
CDN_BUCKET_REGION = onepassword_service.get_item(
    DEV_ONEPASSWORD_REFERENCE + "digitalocean/cdn_bucket_region"
)


LOGIN_URL = "/admin/login/"
AUTH0_DOMAIN = onepassword_service.get_item(
    LOCAL_ONEPASSWORD_REFERENCE + "auth0/rest_api_domain"
)
AUTH0_IDENTIFIER = onepassword_service.get_item(
    LOCAL_ONEPASSWORD_REFERENCE + "auth0/rest_api_identifier"
)

AUTH0_DATABASE_CONNECTION_ID = onepassword_service.get_item(
    LOCAL_ONEPASSWORD_REFERENCE + "auth0/db_connection_id"
)

AUTH0_GOOGLE_CONNECTION_ID = onepassword_service.get_item(
    DEV_ONEPASSWORD_REFERENCE + "auth0/google_connection_id"
)

AUTH0_REST_API_CLIENT_ID = onepassword_service.get_item(
    LOCAL_ONEPASSWORD_REFERENCE + "auth0/rest_api_client_id"
)
AUTH0_REST_API_CLIENT_SECRET = onepassword_service.get_item(
    LOCAL_ONEPASSWORD_REFERENCE + "auth0/rest_api_client_secret"
)

AUTH0_MERCHANT_ROLE_ID = onepassword_service.get_item(
    LOCAL_ONEPASSWORD_REFERENCE + "auth0/roles_merchant"
)

SENDGRID_API_KEY = ""
TWILIO_ACCOUNT_SID = ""
TWILIO_AUTH_TOKEN = ""

STRIPE_API_KEY = ""
STRIPE_WEBHOOK_SECRET = ""
MIXPANEL_TOKEN = ""
IS_PRODUCTION = False
IS_QA = False


JWT_AUTH = {
    "JWT_PAYLOAD_GET_USERNAME_HANDLER": "django_project.auth_utils.jwt_get_username_from_payload_handler",
    "JWT_DECODE_HANDLER": "django_project.auth_utils.jwt_decode_token",
    "JWT_ALGORITHM": "RS256",
    "JWT_AUDIENCE": AUTH0_IDENTIFIER,
    "JWT_ISSUER": "https://" + AUTH0_DOMAIN + "/" if AUTH0_DOMAIN else None,
    "JWT_AUTH_HEADER_PREFIX": "Bearer",
}


def initialize_opentelemetry():
    DjangoInstrumentor().instrument(is_sql_commentor_enabled=True)
    ElasticsearchInstrumentor().instrument()
    RedisInstrumentor().instrument()
    RequestsInstrumentor().instrument()
    Psycopg2Instrumentor().instrument(enable_commenter=True, commenter_options={})
    CeleryInstrumentor().instrument()


def add_open_telemetry_spans(_, __, event_dict):
    span = trace.get_current_span()
    if not span.is_recording():
        event_dict["span"] = None
        return event_dict

    ctx = span.get_span_context()
    parent = getattr(span, "parent", None)

    event_dict["span"] = {
        "span_id": hex(ctx.span_id),
        "trace_id": hex(ctx.trace_id),
        "parent_span_id": None if not parent else hex(parent.span_id),
    }

    return event_dict


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "loggers": {
        "root": {
            "level": "DEBUG",
            "propagate": True,
        },
    },
}
