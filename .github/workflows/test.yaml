name: Run tests

concurrency:
  group: ${{ github.ref }}

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  run_django_tests:
    name: Backend tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install setuptools and upgrade pip and install wheel
        run: |
          python -m pip install --upgrade pip
          pip install setuptools
          pip install wheel
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: 0.8.2
      - name: Install Dependencies
        working-directory: ./api/django_project/
        run: |
          sudo mkdir /logs/
          sudo chmod 777 /logs/
          uv sync
      - name: Linting
        working-directory: ./api/django_project/
        env:
          DATABASE_NAME: postgres
          DATABASE_USER: postgres
          DATABASE_PASSWORD: postgres
        run: |
          ls -la
          uv run ruff check .
      - name: Run Tests
        working-directory: ./api/django_project/
        env:
          DATABASE_NAME: postgres
          DATABASE_USER: postgres
          DATABASE_PASSWORD: postgres
        run: |
          uv run manage.py makemigrations --check --dry-run
          uv run coverage3 erase
          uv run coverage3 run --source=rest_api --omit=*/migrations/*,*/modules/*,*/factory/*,*/tests/*,*/e2e/*,*/schemas/*,*/services/*,*/serializers/*,*/management/*,admin.py,apps.py,channels.py -m pytest --ds=django_project.settings_test --ignore-glob=**rest_api/e2e/**
          uv run coverage3 report -m
          uv run coverage3 xml
